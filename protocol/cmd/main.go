//用于更加注册文件自动注册pb
package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
)

var items []pbItem

type pbItem struct {
	id    uint16
	msg   string
	comma string
}

func main() {
	if len(os.Args) <= 1 {
		fmt.Println("need input file")
		os.Exit(1)
	}
	f, err := os.Open(os.Args[1])
	if err != nil {
		fmt.Printf("open input file error: %v\n", err)
		os.Exit(1)
	}
	defer f.Close()
	br := bufio.NewReader(f)
	var idMap = make(map[uint16]string)
	for {
		s, _, c := br.ReadLine()
		if c == io.EOF {
			break
		}
		line := string(s)
		commaStr := ""
		idx := strings.Index(line, "//")
		if idx >= 0 {
			commaStr = line[idx:]
			line = line[:idx]
		}
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}
		its := strings.Split(line, "=")
		if len(its) != 2 {
			fmt.Printf("Invalid line %v\n", its)
			break
		}
		sMsgId := strings.ToLower(strings.TrimSpace(its[1]))
		base := 10
		if strings.HasPrefix(sMsgId, "0x") {
			sMsgId = sMsgId[2:]
			base = 16
		}

		msgId, err := strconv.ParseUint(sMsgId, base, 16)
		if err != nil {
			fmt.Printf("ParseUint err at line %s\n %s", line, string(s))
		}
		msgStr := strings.TrimSpace(its[0])
		if _, ok := idMap[uint16(msgId)]; ok {
			fmt.Printf("register twice for msgId: %d\n", msgId)
			os.Exit(1)
		}
		idMap[uint16(msgId)] = msgStr
		items = append(items, pbItem{
			id:    uint16(msgId),
			msg:   msgStr,
			comma: commaStr,
		})
	}
	genFile()
}

// 生成go文件
func genFile() {
	f, err := os.Create("protoFactory.go")
	if err != nil {
		fmt.Printf("genFile error:%v", err)
		os.Exit(1)
	}
	defer f.Close()
	bw := bufio.NewWriter(f)
	bw.WriteString("// Code generated by go generate. DO NOT EDIT.\n")
	bw.WriteString("package protocol\n")
	bw.WriteString("import \"gogame/protocol/pb\"\n")
	bw.WriteString("const(\n")
	for _, it := range items {
		bw.WriteString(fmt.Sprintf("MsgID_%s = %d %s\n", it.msg, it.id, it.comma))
	}
	bw.WriteString(")\n")

	bw.WriteString("func init() {\n")
	bw.WriteString("processor = NewProcessor()\n")
	for _, it := range items {
		bw.WriteString(fmt.Sprintf("\tprocessor.Register(MsgID_%s, (*pb.%s)(nil))\n", it.msg, it.msg))
	}
	bw.WriteString("}\n")
	bw.Flush()

}
